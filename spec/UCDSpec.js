/**
 * @license Released under the MIT license.
 *
 * <pre>
 * Copyright (c) 2013 ynakajima <yuhta.nakajima@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * </pre>
 *
 * @fileoverview Spec of UCD.
 * @author yuhta.nakajima@gmail.com (ynakajima)
 */
(function(global) {

  // require
  var UCD = (typeof require !== 'undefined') ?
    require('../') :
    global.UCD;
  var UnicodeData = (typeof require !== 'undefined') ?
    require('../data/unicodedata.js') :
    global.UnicodeData;

  // spec
  describe('UCD', function() {

    it('is Object', function() {
      expect(UCD).toEqual(jasmine.any(Object));
    });

    it('has readUnicodeData Class method', function() {
      expect(UCD.readUnicodeData).toEqual(jasmine.any(Function));
    });

    it('has getName Class method', function() {
      expect(UCD.getName).toEqual(jasmine.any(Function));
    });

    it('has getUnicodeVersion Class method', function() {
      expect(UCD.getUnicodeVersion).toEqual(jasmine.any(Function));
      expect(UCD.getUnicodeVersion()).toEqual(UnicodeData.unicodeVersion);
    });

  });

  describe('UCD.getName Class method', function() {

    it('returns the unicode name of the given character', function() {
      expect(UCD.getName('@')).toEqual('COMMERCIAL AT');
      expect(UCD.getName('A')).toEqual('LATIN CAPITAL LETTER A');
      expect(UCD.getName('7')).toEqual('DIGIT SEVEN');
      expect(UCD.getName('u')).toEqual('LATIN SMALL LETTER U');
      expect(UCD.getName('„Å§')).toEqual('HIRAGANA LETTER TU');
      expect(UCD.getName('„Çü')).toEqual('HIRAGANA DIGRAPH YORI');
      expect(UCD.getName('„Ç¨')).toEqual('KATAKANA LETTER GA');
      expect(UCD.getName('„Ä¥')).toEqual('VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF');
      expect(UCD.getName('„ãÄ')).toEqual('IDEOGRAPHIC TELEGRAPH SYMBOL FOR JANUARY');
      expect(UCD.getName('Âêâ')).toEqual('CJK UNIFIED IDEOGRAPH-5409');
      expect(UCD.getName('ÈÇâ')).toEqual('CJK UNIFIED IDEOGRAPH-9089');
      expect(UCD.getName('È∏ô')).toEqual('CJK UNIFIED IDEOGRAPH-9E19');
      expect(UCD.getName('„êÖ')).toEqual('CJK UNIFIED IDEOGRAPH EXTENSION A-3405');
      expect(UCD.getName('‰∑†')).toEqual('HEXAGRAM FOR RETREAT');
      expect(UCD.getName('„ãí')).toEqual('CIRCLED KATAKANA U');
      expect(UCD.getName('„Ü°')).toEqual('BOPOMOFO LETTER ZI');
      expect(UCD.getName('‚á∂')).toEqual('THREE RIGHTWARDS ARROWS');
      expect(UCD.getName('„Äê')).toEqual('LEFT BLACK LENTICULAR BRACKET');
      expect(UCD.getName('‚Åà')).toEqual('QUESTION EXCLAMATION MARK');
      expect(UCD.getName('„àò')).toEqual('PARENTHESIZED HANGUL KHIEUKH A');
      expect(UCD.getName('‚Öó')).toEqual('VULGAR FRACTION THREE FIFTHS');
      expect(UCD.getName('‚òø')).toEqual('MERCURY');
      expect(UCD.getName('‚óâ')).toEqual('FISHEYE');
      expect(UCD.getName('√∑')).toEqual('DIVISION SIGN');
      expect(UCD.getName('„åÖ')).toEqual('SQUARE INTI');
      expect(UCD.getName('‚Ç¨')).toEqual('EURO SIGN');
      expect(UCD.getName('‚òé')).toEqual('BLACK TELEPHONE');
      expect(UCD.getName('‚ò£')).toEqual('BIOHAZARD SIGN');
      expect(UCD.getName('‚çû')).toEqual('APL FUNCTIONAL SYMBOL QUOTE QUAD');
      expect(UCD.getName('·øë')).toEqual('GREEK SMALL LETTER IOTA WITH MACRON');
      expect(UCD.getName('Ô¨ª')).toEqual('HEBREW LETTER KAF WITH DAGESH');
      expect(UCD.getName('Ô≠ª')).toEqual('ARABIC LETTER TCHEH FINAL FORM');
      expect(UCD.getName('Ô®ó')).toEqual('CJK COMPATIBILITY IDEOGRAPH-FA17');
      expect(UCD.getName('Ô¨Ö')).toEqual('LATIN SMALL LIGATURE LONG S T');
      expect(UCD.getName('Í¨ã')).toEqual('ETHIOPIC SYLLABLE DDHAA');
      expect(UCD.getName('‚Ñ±')).toEqual('SCRIPT CAPITAL F');
      expect(UCD.getName('‚ú±')).toEqual('HEAVY ASTERISK');
      expect(UCD.getName('‚Åø')).toEqual('SUPERSCRIPT LATIN SMALL LETTER N');
      expect(UCD.getName('√ò')).toEqual('LATIN CAPITAL LETTER O WITH STROKE');
      expect(UCD.getName('√º')).toEqual('LATIN SMALL LETTER U WITH DIAERESIS');
      expect(UCD.getName('ƒû')).toEqual('LATIN CAPITAL LETTER G WITH BREVE');
      expect(UCD.getName('ÃÑ')).toEqual('COMBINING MACRON');
      expect(UCD.getName(' ¨')).toEqual('LATIN LETTER BILABIAL PERCUSSIVE');
      expect(UCD.getName('Àø')).toEqual('MODIFIER LETTER LOW LEFT ARROW');
      expect(UCD.getName('Õú')).toEqual('COMBINING DOUBLE BREVE BELOW');
      expect(UCD.getName('“ä')).toEqual('CYRILLIC CAPITAL LETTER SHORT I WITH TAIL');
      expect(UCD.getName('’ë')).toEqual('ARMENIAN CAPITAL LETTER CO');
      expect(UCD.getName('◊¶')).toEqual('HEBREW LETTER TSADI');
      expect(UCD.getName('÷Æ')).toEqual('HEBREW ACCENT ZINOR');
      expect(UCD.getName('ŸÇ')).toEqual('ARABIC LETTER QAF');
      expect(UCD.getName('‡†ã')).toEqual('SAMARITAN LETTER LABAT');
      expect(UCD.getName('‡§ñ')).toEqual('DEVANAGARI LETTER KHA');
      expect(UCD.getName('‡©¥')).toEqual('GURMUKHI EK ONKAR');
      expect(UCD.getName('·ö°')).toEqual('RUNIC LETTER V');
      expect(UCD.getName('·úä')).toEqual('TAGALOG LETTER BA');
      expect(UCD.getName('·ú¢')).toEqual('HANUNOO LETTER U');
      expect(UCD.getName('·û°')).toEqual('KHMER LETTER LA');
      expect(UCD.getName('·£ê')).toEqual('CANADIAN SYLLABICS RWII');
      expect(UCD.getName('·∫Ç')).toEqual('LATIN CAPITAL LETTER W WITH ACUTE');
      expect(UCD.getName('‚åö')).toEqual('WATCH');
      expect(UCD.getName('‚îè')).toEqual('BOX DRAWINGS HEAVY DOWN AND RIGHT');
      expect(UCD.getName('‚®ã')).toEqual('SUMMATION WITH INTEGRAL');
      expect(UCD.getName('‚∞∞')).toEqual('GLAGOLITIC SMALL LETTER AZU');
      expect(UCD.getName('„Ñú')).toEqual('BOPOMOFO LETTER E');
      expect(UCD.getName('„ÄΩ')).toEqual('PART ALTERNATION MARK');
      expect(UCD.getName('‚ª£')).toEqual('CJK RADICAL BONE');
      expect(UCD.getName('‚∫†')).toEqual('CJK RADICAL CIVILIAN');
      expect(UCD.getName('‚ªû')).toEqual('CJK RADICAL EAT TWO');
      expect(UCD.getName('‚øí')).toEqual('KANGXI RADICAL TOOTH');
      expect(UCD.getName('‚ø∂')).toEqual('IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM BELOW');
      expect(UCD.getName('„ÖÄ')).toEqual('HANGUL LETTER RIEUL-HIEUH');
      expect(UCD.getName('„Üù')).toEqual('IDEOGRAPHIC ANNOTATION HEAVEN MARK');
      expect(UCD.getName('„áè')).toEqual('CJK STROKE N');
      expect(UCD.getName('„áº')).toEqual('KATAKANA LETTER SMALL RI');
      expect(UCD.getName('„âÄ')).toEqual('PARENTHESIZED IDEOGRAPH FESTIVAL');
      expect(UCD.getName('„ê¶')).toEqual('CJK UNIFIED IDEOGRAPH EXTENSION A-3426');
      expect(UCD.getName('ÍÅΩ')).toEqual('YI SYLLABLE NBAT');
      expect(UCD.getName('Íîû')).toEqual('VAI SYLLABLE KEE');
      expect(UCD.getName('Í±ü')).toEqual('HANGUL SYLLABLE-AC5F');
      expect(UCD.getName('Ô§à')).toEqual('CJK COMPATIBILITY IDEOGRAPH-F908');
      expect(UCD.getName('Ô≠ä')).toEqual('HEBREW LETTER TAV WITH DAGESH');
      expect(UCD.getName('Ô∏ë')).toEqual('PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA');
      expect(UCD.getName('Ô∏ª')).toEqual('PRESENTATION FORM FOR VERTICAL LEFT BLACK LENTICULAR BRACKET');
      expect(UCD.getName('ÔΩª')).toEqual('HALFWIDTH KATAKANA LETTER SA');
      expect(UCD.getName('®â∑')).toEqual('CJK UNIFIED IDEOGRAPH EXTENSION B-28277');
      expect(UCD.getName('ùÑû')).toEqual('MUSICAL SYMBOL G CLEF');
      expect(UCD.getName('üÇ©')).toEqual('PLAYING CARD NINE OF SPADES');
    });

  });

})(this);
